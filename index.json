[{"content":"Fala pessoal,\nRecentemente me deparei com o desafio de coletar as métricas de um equipamento via protocolo SNMP, e expôr essas métricas no Prometheus. Como solução encontrei o componente snmp_exporter, que permite a coleta das métricas SNMP e convertem no modelo de dados utilizado pelo Prometheus.\nNeste post vamos aprender a extrair métricas customizadas a partir de uma Base de Gerenciamento de informações (Management Information Base - MIB) SNMP, criar um arquivo de configuração snmp.yml para a coleta de métricas pelo snmp_exporter, e expôr essas métricas no prometheus.\nRequisitos Host Linux; Docker; Go. Instalação Clone o repositorio do snmp_exporter:\ngit clone https://github.com/prometheus/snmp_exporter.git Instale as dependências de acordo com o seu sistema operacional e em seguida compile o generator:\n# Debian-based distributions. sudo apt-get install unzip build-essential libsnmp-dev # Redhat-based distributions. sudo yum install gcc make net-snmp net-snmp-utils net-snmp-libs net-snmp-devel # Compilar o generator cd snmp_exporter/generator make generator mibs Após a compilação podemos visualizar, no diretório atual, o binário generator e o arquivo snmp.yml recém criados.\nConfiguração Neste exemplo utilizei a MIB de um nobreak UPS. Recomendo que utilize um equipamento e sua respectiva MIB para reproduzir este cenário.\nEdite o arquivo generator.yml e adicione as credenciais, ajustando a comunidade e versão SNMP conforme necessário:\nauths: public_v1: community: public security_level: noAuthNoPriv auth_protocol: MD5 priv_protocol: DES version: 1 Ainda no arquivo generator, após definir quais as métricas serão utilizadas, crie uma nova entrada de módulo:\nmodules: teste: walk: - nome - ups - modeloUps - vin - vout - perBateria - temperatura Adicione o arquivo *.mib de referência no diretório mibs. Este arquivo será utilizado pelo generator para mapear as métricas configuradas no passo anterior, traduzi-lás para o respectivo OID, e atualizar o arquivo snmp.yml;\nExecute o comando ./generator -m mibs/ generate para atualizar o snmp.yml. Neste arquivo é possível validar as métricas recém configuradas:\nteste: get: - 1.3.6.1.4.1.28802.1.1.0 - 1.3.6.1.4.1.28802.2.1.1.0 - 1.3.6.1.4.1.28802.2.1.2.0 - 1.3.6.1.4.1.28802.2.2.1.0 - 1.3.6.1.4.1.28802.2.2.2.0 - 1.3.6.1.4.1.28802.2.2.5.0 - 1.3.6.1.4.1.28802.2.2.6.0 metrics: - name: nome oid: 1.3.6.1.4.1.28802.1.1 type: DisplayString help: nome do produto - 1.3.6.1.4.1.28802.1.1 - name: ups oid: 1.3.6.1.4.1.28802.2.1.1 type: DisplayString help: tipo de UPS - 1.3.6.1.4.1.28802.2.1.1 - name: modeloUps oid: 1.3.6.1.4.1.28802.2.1.2 type: DisplayString help: modelo do UPS - 1.3.6.1.4.1.28802.2.1.2 - name: vin oid: 1.3.6.1.4.1.28802.2.2.1 type: gauge help: Tensao de entrada - 1.3.6.1.4.1.28802.2.2.1 - name: vout oid: 1.3.6.1.4.1.28802.2.2.2 type: gauge help: Tensao de saida - 1.3.6.1.4.1.28802.2.2.2 - name: perBateria oid: 1.3.6.1.4.1.28802.2.2.5 type: gauge help: Porcentagem da carga de bateria - 1.3.6.1.4.1.28802.2.2.5 - name: temperatura oid: 1.3.6.1.4.1.28802.2.2.6 type: gauge help: Temperatura - 1.3.6.1.4.1.28802.2.2.6 Validando as configurações - TL;DR Para validar as configurações, utilizei uma stack do docker compose, contendo os serviços snmp_exporter, prometheus e grafana. Todos os arquivos utilizados neste post estão no meu repositório.\nAbaixo seguem prints pós configuração.\nSNMP Exporter:\nMétricas capturadas pelo exporter:\nMétricas do exporter inseridas no Prometheus:\nMétricas disponíveis no grafana após configuração do datasource.\nDados transformados em informações no Grafana: Espero ter ajudado, Até breve!\n","permalink":"https://rbsantosbr.github.io/posts/criando-metricas-personalizadas-para-o-prometheus-snmp-exporter/","summary":"\u003cp\u003eFala pessoal,\u003cbr\u003e\nRecentemente me deparei com o desafio de coletar as métricas de um equipamento via protocolo SNMP, e expôr essas métricas no Prometheus. Como solução encontrei o componente snmp_exporter, que permite a coleta das métricas SNMP e convertem no modelo de dados utilizado pelo Prometheus.\u003c/p\u003e\n\u003cp\u003eNeste post vamos aprender a extrair métricas customizadas a partir de uma Base de Gerenciamento de informações (Management Information Base - MIB) SNMP, criar um arquivo de configuração snmp.yml para a coleta de métricas pelo snmp_exporter, e expôr essas métricas no prometheus.\u003c/p\u003e","title":"Criando métricas personalizadas para o Prometheus com o SNMP Exporter"},{"content":"O Proxmox Virtual Environment, comunmente chamado de proxmox, é uma plataforma de virtualização de código aberto, que permite a criação e gerenciamento de máquinas virtuais e/ou contêneres, através da sua interface intuitiva e amigável.\nO Terraform provider bpg/proxmox possui a capacidade de controlar diversos recursos desta plataforma, como por exemplo, usuários, roles, upload de arquivos, snippets, vlans, etc.\nNeste primeiro post veremos como fazer a configuração deste provider, criando um usuário com as credenciais necessárias para gerenciar os recursos do proxmox, através do terraform.\nPré-requisitos Terraform 0.13+\nProxmox Virtual Environment - versão utilizada: 8.2.2\nEditor da sua preferência.\nEstrutura do projeto Utilize os comandos abaixo para criar a estrutura necessária para o projeto:\nmkdir -p proxmox touch ./proxmox/{main,providers,outputs,variables}.tf touch ./proxmox/credentials.auto.tfvars Após a criação, o diretório ficará assim:\nConfigurando o provider Inicialmente edite o arquivo providers.tf, adicionando os blocos de código abaixo:\nterraform { required_providers { proxmox = { source = \u0026#34;bpg/proxmox\u0026#34; version = \u0026#34;0.68.0\u0026#34; } } required_version = \u0026#34;\u0026gt;= 0.13\u0026#34; } provider \u0026#34;proxmox\u0026#34; { endpoint = var.endpoint username = var.username password = var.password # Habilite esta opção caso não possua um certificado válido. #insecure = true ssh { agent = true } } O bloco de código terraform define, dentre outros, todos os plugins necessários para a criação e gerenciamento de recursos definidos no projeto. Já o bloco provider, estabelece como vamos interagir com o proxmox.\nPara mais detalhes sobre o provider bpg/proxmox clique aqui.\nDefinição das variáveis As variáveis do terraform permitem customizar os recursos de forma dinâmica, tornando o código reutilizável.\nDepois da configuração do provider, edite o arquivo variables.tf e adicione as definições das variáveis:\nvariable \u0026#34;endpoint\u0026#34; { type = string description = \u0026#34;Endereço da API do proxmox\u0026#34; } variable \u0026#34;username\u0026#34; { type = string description = \u0026#34;usuario do proxmox\u0026#34; } variable \u0026#34;password\u0026#34; { type = string description = \u0026#34;senha do usuario proxmox\u0026#34; } No arquivo credencial.auto.tfvars adicione os valores das respectivas variáveis no esquema \u0026ldquo;chave=valor\u0026rdquo;.\nendpoint = \u0026#34;https://\u0026lt;ip_do_servidor_proxmox\u0026gt;:8006\u0026#34; username = \u0026#34;superuser@pam\u0026#34; password = \u0026#34;superUserPassword\u0026#34; Os valores das variáveis definidos em arquivos *.auto.tfvars, são automaticamente carregados durante a execução do código terraform.\nInicializando o projeto Realizadas todas as configurações, execute o comando terraform init para que o terraform faça o download e instalação do provider. A saída do comando será semelhante a esta:\nGerenciando os recursos Faremos a configuração de três recursos do proxmox via terraform. Serão eles:\nRole: Define o conjunto privilégios que executam funções específicas dentro do proxmox; User: Um novo usuário que será associado a role recém-criada; Token: Um token de api para o novo usuário, em substituição ao parâmetro password. Edite o arquivo main.tf e adicione o seguinte conteúdo:\nresource \u0026#34;proxmox_virtual_environment_role\u0026#34; \u0026#34;terraform\u0026#34; { role_id = \u0026#34;BPG-Terraform\u0026#34; privileges = [ \u0026#34;Datastore.Allocate\u0026#34;, \u0026#34;Datastore.AllocateSpace\u0026#34;, \u0026#34;Datastore.AllocateTemplate\u0026#34;, \u0026#34;Datastore.Audit\u0026#34;, \u0026#34;Permissions.Modify\u0026#34;, \u0026#34;Pool.Allocate\u0026#34;, \u0026#34;Realm.AllocateUser\u0026#34;, \u0026#34;Sys.Audit\u0026#34;, \u0026#34;Sys.Console\u0026#34;, \u0026#34;Sys.Modify\u0026#34;, \u0026#34;SDN.Use\u0026#34;, \u0026#34;VM.Allocate\u0026#34;, \u0026#34;VM.Audit\u0026#34;, \u0026#34;VM.Clone\u0026#34;, \u0026#34;VM.Config.CDROM\u0026#34;, \u0026#34;VM.Config.Cloudinit\u0026#34;, \u0026#34;VM.Config.CPU\u0026#34;, \u0026#34;VM.Config.Disk\u0026#34;, \u0026#34;VM.Config.HWType\u0026#34;, \u0026#34;VM.Config.Memory\u0026#34;, \u0026#34;VM.Config.Network\u0026#34;, \u0026#34;VM.Config.Options\u0026#34;, \u0026#34;VM.Migrate\u0026#34;, \u0026#34;VM.Monitor\u0026#34;, \u0026#34;VM.PowerMgmt\u0026#34;, \u0026#34;User.Modify\u0026#34;, ] } resource \u0026#34;proxmox_virtual_environment_user\u0026#34; \u0026#34;pve_user\u0026#34; { acl { path = \u0026#34;/\u0026#34; propagate = true role_id = proxmox_virtual_environment_role.terraform.role_id } comment = \u0026#34;Managed by Terraform\u0026#34; user_id = \u0026#34;proxmox-post@pve\u0026#34; } resource \u0026#34;proxmox_virtual_environment_user_token\u0026#34; \u0026#34;pve_user_token\u0026#34; { comment = \u0026#34;Managed by Terraform\u0026#34; expiration_date = \u0026#34;2024-12-10T00:30:00Z\u0026#34; # Altere a data de expiração do token, ou comente esta linha para desativar a expiração do token. privileges_separation = false token_name = \u0026#34;terraform\u0026#34; user_id = proxmox_virtual_environment_user.pve_user.user_id } No arquivo outputs.tf, adicione as entradas abaixo:\noutput \u0026#34;id\u0026#34; { value = proxmox_virtual_environment_user_token.pve_user_token.id } output \u0026#34;api_token\u0026#34; { value = proxmox_virtual_environment_user_token.pve_user_token.value sensitive = true } Aplique as configurações utilizando os comandos terraform plan e terraform apply\nAgora verifique os recursos recém criados no proxmox. O API token é classificado como uma informação sensível e o terraform possui diversos mecanismos para evitar o vazamento deste dado. Para recuperar o valor do token execute o comando terraform output -raw api-token. Para validar o token, atualize os arquivos providers, variables e credentials.auto.tfvars respectivamente, conforme exemplo abaixo.\n# main.tf provider \u0026#34;proxmox\u0026#34; { endpoint = var.endpoint api_token = var.api_token # username = var.username # password = var.password # Habilite esta opção caso não possua um certificado válido. #insecure = true ssh { agent = true } } # variables.tf variable \u0026#34;api_token\u0026#34; { type = string description = \u0026#34;token para autenticação. Substitui username e password.\u0026#34; } # credentials.auto.tfvars api_token = \u0026#34;proxmox-post@pve!terraform=448...\u0026#34; Agora você tem um usuário para gerenciar os recursos do proxmox através do terraform.\nRepositório dos artefatos utilizados neste post.\nAté breve! 🤓\n","permalink":"https://rbsantosbr.github.io/posts/gerenciando-recursos-do-proxmox-com-o-terraform/","summary":"\u003cp\u003eO Proxmox Virtual Environment, comunmente chamado de proxmox, é uma plataforma de virtualização de código aberto, que permite a criação e gerenciamento de máquinas virtuais e/ou contêneres, através da sua interface intuitiva e amigável.\u003c/p\u003e\n\u003cp\u003eO \u003cem\u003eTerraform provider\u003c/em\u003e \u003cstrong\u003ebpg/proxmox\u003c/strong\u003e possui a capacidade de controlar diversos recursos desta plataforma, como por exemplo, usuários, roles, upload de arquivos, snippets, vlans, etc.\u003c/p\u003e\n\u003cp\u003eNeste primeiro post veremos como fazer a configuração deste provider, criando um usuário com as credenciais necessárias para gerenciar os recursos do proxmox, através do terraform.\u003c/p\u003e","title":"Gerenciando recursos do Proxmox com o Terraform"},{"content":"Como Analista DevOps, minha paixão é otimizar processos e impulsionar a melhoria contínua, buscando constantemente novas abordagens para elevar a eficiência, escalabilidade e confiabilidade em ambientes de produção. Meu compromisso é entregar resultados de alta qualidade visando otimizar fluxos de trabalho e gerar resultados tangíveis para o negócio.\nGraduado em Ciências da Computação pela Uniruy Wyden, tenho mais de 12 anos de experiência como analista de infraestrutura e operações de TI, colaborando com equipes multidisciplinares, desenvolvendo soluções para os desafios dos clientes e organizacionais, e onde pude desenvolver habilidades com gerência de configuração, pipelines de CI/CD, monitoramento, troubleshooting em ambientes Linux e Windows, dentre outras.\nMinha expertise técnica abrange um ecossistema de tecnologias modernas, incluindo:\nContainers: Docker e Kubernetes CI/CD: GitLab CI Cloud Computing: AWS e Oracle Cloud Gerenciamento de Configuração: Ansible Infraestrutura como Código (IaC): Terraform Versionamento: Git, Github e GitLab Monitoramento e Observabilidade: Zabbix, Prometheus e Grafana Sistemas Operacionais: Linux e Windows Servidores Web: IIS, Apache e Nginx Certificações:\nCertified Kubernetes Administrator (CKA); AWS Cloud Practitioner; GitLab Certified Associate; ITIL IT Service Management v4. Espero que possa te ajudar também. 🤓\n","permalink":"https://rbsantosbr.github.io/sobre/","summary":"\u003cp\u003eComo Analista DevOps, minha paixão é otimizar processos e impulsionar a melhoria contínua, buscando constantemente novas abordagens para elevar a eficiência, escalabilidade e confiabilidade em ambientes de produção. Meu compromisso é entregar resultados de alta qualidade visando otimizar fluxos de trabalho e gerar resultados tangíveis para o negócio.\u003c/p\u003e\n\u003cp\u003eGraduado em Ciências da Computação pela Uniruy Wyden, tenho mais de 12 anos de experiência como analista de infraestrutura e operações de TI, colaborando com equipes multidisciplinares, desenvolvendo soluções para os desafios dos clientes e organizacionais, e onde pude desenvolver habilidades com gerência de configuração, pipelines de CI/CD, monitoramento, troubleshooting em ambientes Linux e Windows, dentre outras.\u003c/p\u003e","title":"Sobre"}]